#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

domain=$YNH_APP_ARG_DOMAIN
path_url=$YNH_APP_ARG_PATH
is_public=$YNH_APP_ARG_IS_PUBLIC

app=$YNH_APP_INSTANCE_NAME

script_dir=$PWD

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================

final_path=/var/www/$app
test ! -e "$final_path" || ynh_die "This path already contains a folder"

# Normalize the url path syntax
path_url=$(ynh_normalize_url_path $path_url)

# Check web path availability
ynh_webpath_available $domain $path_url
# Register (book) web path
ynh_webpath_register $app $domain $path_url

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================

ynh_app_setting_set $app domain $domain
ynh_app_setting_set $app path $path_url
ynh_app_setting_set $app is_public $is_public

#=================================================
# STANDARD MODIFICATIONS
#=================================================
# FIND AND OPEN A PORT
#=================================================

# Find a free port
port=$(ynh_find_port 8096)
# Open this port
yunohost firewall allow --no-upnp TCP $port 2>&1
ynh_app_setting_set $app port $port

#=================================================
# INSTALL DEPENDENCIES
#=================================================

ynh_install_app_dependencies build-essential libssl-dev libpq-dev libpng-dev

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

ynh_app_setting_set $app final_path $final_path
# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source "$final_path"

#Refactoring : end of part one.

# Copy it to Nginx conf directory
sudo cp ../conf/nginx.conf /etc/nginx/conf.d/$domain.d/$app.conf

if [ $is_public -eq 1 ];
then
	ynh_replace_string "#--PRIVATE--" "" "/etc/nginx/conf.d/$domain.d/$app.conf"
fi

## Copy and fix variable into lstu config
cp ../conf/lstu.conf.template "${final_path}/lstu.conf"
ynh_replace_string "__DOMAIN__" "$domain" "$final_path/lstu.conf"
ynh_replace_string "__PATH__" "$path_url" "$final_path/lstu.conf"
ynh_replace_string "__PORT__" "$port" "$final_path/lstu.conf"

secret=$(ynh_string_random 24)
ynh_replace_string "__SECRET__" "$secret" "${final_path}/lstu.conf"
ynh_store_file_checksum "lstu.conf" "${final_path}/lstu.conf"

#=================================================
# SETUP SYSTEMD
#=================================================

# Create a dedicated systemd config
ynh_systemd_config

#=================================================
# SETUP LOGROTATE
#=================================================

# Use logrotate to manage application logfile(s)
ynh_use_logrotate

#=================================================
# Installation of Carton
#=================================================

echo yes | sudo cpan Carton

#=================================================
# Installation with Carton
#=================================================

pushd $final_path
carton install 2>&1 | sudo tee -a "/var/log/$app/setup_carton.log"
popd

#=================================================
# Change variables in nginx configuration
#=================================================

ynh_replace_string "__PATH__" "$path" "/etc/nginx/conf.d/$domain.d/$app.conf"
ynh_replace_string "__PORT__" "$port" "/etc/nginx/conf.d/$domain.d/$app.conf"

#=================================================
# Make app public or private
#=================================================

ynh_app_setting_set $app skipped_uris "/"
if [ $is_public -eq 0 ];
then	# If the app is private, only the shortened URLs are publics
	if [ "$path" == "/" ]; then
		path=""
	fi
	ynh_app_setting_set $app protected_regex "$domain_regex$path_url/login$","$domain_regex$path_url/logout$","$domain_regex$path_url/api$","$domain_regex$path_url/extensions$","$domain_regex$path_url/stats$","$domain_regex$path_url/d/.*$","$domain_regex$path_url/a$","$domain_regex$path_url/$"
fi

#=================================================
# Making log symbolic link to /var/log
#=================================================

touch /var/log/$app/production.log 
chown www-data: /var/log/$app/production.log
ln -s /var/log/$app/production.log "$final_path/log/production.log"

#=================================================
# Configure owner
#=================================================

sudo chown -R www-data: $final_path

#=================================================
# Start lstu
#=================================================

systemctl daemon-reload
systemctl start lstu.service
systemctl enable lstu.service

#=================================================
# Set right permissions on new files created at first start
#=================================================

sudo chown -R www-data: "$final_path"

#=================================================
# Add lstu as a service
#=================================================

if [ $is_public -eq 0 ];
then
	# Delete public access
	ynh_app_setting_delete $app unprotected_uris
	# Regenerate SSOwat's configuration
	sudo yunohost app ssowatconf
fi

#=================================================
# Reload Nginx
#=================================================

sudo service nginx reload
